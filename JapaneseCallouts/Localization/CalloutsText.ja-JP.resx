<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlarmSwitchKey" xml:space="preserve">
    <value>{0}を押していつでも~r~アラーム~s~を切り替えることができます。</value>
  </data>
  <data name="BankHeistCopyThat" xml:space="preserve">
    <value>了解した。~r~緊急走行~s~で~b~パシフィック銀行~s~に向かう。</value>
  </data>
  <data name="BankHeistMoveIn" xml:space="preserve">
    <value>{0}を押して~b~特殊部隊~s~に~y~突入指示~s~を与えます。</value>
  </data>
  <data name="BankHeistReleaseHostage" xml:space="preserve">
    <value>{0}を長押しして~b~人質~s~を開放します。</value>
  </data>
  <data name="BankHeistReportSubtitle" xml:space="preserve">
    <value>~g~いい仕事ぶりです!~s~</value>
  </data>
  <data name="BankHeistReportText" xml:space="preserve">
    <value>~g~救助した人質~s~: {0}~n~~r~死亡した人質~s~: {1}~n~~y~殺害した強盗犯~s~: {2}</value>
  </data>
  <data name="BankHeistReportTitle" xml:space="preserve">
    <value>報告書 - 銀行強盗</value>
  </data>
  <data name="BankHeistRoger" xml:space="preserve">
    <value>了解した。~r~慎重に対応するように~s~!</value>
  </data>
  <data name="BankHeistWarning" xml:space="preserve">
    <value>~y~警告~s~: このコールアウトには~r~複数の暴力的な言葉が含まれています~s~。決して~g~あなたに対してではない~s~ことに注意してください。</value>
  </data>
  <data name="CallBankRobbers" xml:space="preserve">
    <value>{0}を押して携帯電話で強盗と話し合いを試みます。</value>
  </data>
  <data name="Citizen" xml:space="preserve">
    <value>市民</value>
  </data>
  <data name="Commander" xml:space="preserve">
    <value>司令官</value>
    <comment>It's used in Bank Heist</comment>
  </data>
  <data name="Congratulations" xml:space="preserve">
    <value>おめでとうございます!</value>
  </data>
  <data name="DiedHostages" xml:space="preserve">
    <value>死亡した人質:</value>
  </data>
  <data name="DrunkCallTaxi" xml:space="preserve">
    <value>酔っ払いは~r~自身の足で歩けないようです~s~。タクシーを呼んであげましょう。</value>
  </data>
  <data name="DrunkPerson" xml:space="preserve">
    <value>酔っ払い</value>
  </data>
  <data name="EnterRiot" xml:space="preserve">
    <value>{0}を押して~b~装備を受け取る~s~ために装甲車に乗り込みます。</value>
  </data>
  <data name="Escaped" xml:space="preserve">
    <value>逃走犯を~r~見失いました~s~。</value>
  </data>
  <data name="GearRunOut" xml:space="preserve">
    <value>~r~装備を補充中です~s~。時間経過で再び補充できるようになります。</value>
  </data>
  <data name="NoDiedHostage" xml:space="preserve">
    <value>人質の死者を出すことなく銀行強盗を解決した。</value>
  </data>
  <data name="Remaining" xml:space="preserve">
    <value>残り:</value>
  </data>
  <data name="RescuedHostages" xml:space="preserve">
    <value>救助した人質:</value>
  </data>
  <data name="Robber" xml:space="preserve">
    <value>強盗</value>
  </data>
  <data name="SelectAnswerText" xml:space="preserve">
    <value>表示されたキーを押して回答を選択してください。</value>
  </data>
  <data name="SpawnAmbulance" xml:space="preserve">
    <value>スポーン時に{0}を押して、救急車にスポーンします。</value>
  </data>
  <data name="StolenVehicleData" xml:space="preserve">
    <value>盗難車両の情報~n~~b~ナンバー~s~: {0}~n~~b~車体色~s~: {1}~n~~b~車種~s~: {2}</value>
  </data>
  <data name="StolenVehicleDataUpdate" xml:space="preserve">
    <value>~b~対象車両のGPS情報が更新されました。~s~</value>
  </data>
  <data name="SurrenderHelp" xml:space="preserve">
    <value>~b~他の警官~s~が~b~逮捕~s~を行い、~b~移送~s~します。~n~~b~その場~s~で強盗犯が~b~暴れないように警戒~s~してください。</value>
  </data>
  <data name="SWATFollowing" xml:space="preserve">
    <value>{0}を押して特殊部隊を追従させます。</value>
  </data>
  <data name="SWATIsFollowing" xml:space="preserve">
    <value>~b~特殊部隊~s~の追従を有効にしました。</value>
  </data>
  <data name="SWATIsNotFollowing" xml:space="preserve">
    <value>~b~特殊部隊~s~の追従が解除されました。</value>
  </data>
  <data name="TalkTo" xml:space="preserve">
    <value>~g~{0}~s~と話せ。</value>
  </data>
  <data name="TalkToCommander" xml:space="preserve">
    <value>最初に~g~指揮官~s~と話して、情報を入手しろ。</value>
  </data>
  <data name="TalkToGetInfo" xml:space="preserve">
    <value>~y~{0}~s~と話して情報を入手してください。</value>
  </data>
  <data name="TargetIsIn" xml:space="preserve">
    <value>対象者は~b~{0}~s~周辺に居ます。</value>
  </data>
  <data name="Victim" xml:space="preserve">
    <value>被害者</value>
  </data>
</root>